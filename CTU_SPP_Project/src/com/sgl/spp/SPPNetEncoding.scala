package com.sgl.spp

import java.io.File

import com.sgl.util.FileUtil

import scala.collection.mutable.ArrayBuffer
import scala.io.Source

object SPPNetEncoding {

  def main(args: Array[String]): Unit = {

    val dir = args(0);
    val label = args(1);
    val saveFile = args(2);
    var index = 0
    val files:Array[String] = (new File(dir)).list()
    val size = files.filter(item => {
      //if(item.contains("tcp") && item.contains(".2format")) {
      if(!item.contains(".2format")) {
        val items = item.split("__")(4).replace(".txt", "")
        if(items.toInt>=32)
          true
        else
          false
      }
      else
        false
    })

              .foreach(item => {
                index = index +1
                println(index)
                if(index>=0) {
                  doSPPNet_netflow(dir, item, label, saveFile)
                }
            })
//    System.out.print(size.size)

    //    doSPPNet_session(dir, "capture20110810.binetflow.2format__109.125.20.38__147.32.84.229__tcp__32.txt", "background")







  }


  def doSPPNet_netflow(dir:String, filename:String, label:String, saveFile:String) = {
    //SrcPort DstPort Pkt Byte Duration Interval
    var origBuff = new ArrayBuffer[(Int, Int, Int, Long, Double, Long)]()

    for (line <- Source.fromFile(dir+filename).getLines) {
      val items = line.trim().split("\t")
      if(items.length==11) {
        try {
          origBuff.append((items(2).toInt, items(3).toInt, items(5).toInt, items(6).toLong, items(9).toDouble, items(7).toLong))
        } catch {
          case ex: Exception => println(ex.toString)
        }
      }
    }

    var rstBuff = new ArrayBuffer[(Int, Int, Int, Long, Double, Double)]()
    for(i <- 0 to origBuff.size-2) {
      var interval = origBuff(i+1)._6-origBuff(i)._6
      if(interval>3600000 || interval<0)
        interval = 3600000

      rstBuff.append((origBuff(i)._1, origBuff(i)._2, origBuff(i)._3, origBuff(i)._4, origBuff(i)._5, interval*1.0/1000))
    }
    rstBuff.append((origBuff(origBuff.size-1)._1, origBuff(origBuff.size-1)._2, origBuff(origBuff.size-1)._3, origBuff(origBuff.size-1)._4, origBuff(origBuff.size-1)._5, rstBuff(origBuff.size-2)._6))


    var result = filename+"\t"+label
    result = result + "\t" + (SPPNetParser.oneDimSPPNet(rstBuff.map(item => item._1+0.0).toArray)).mkString("\t").trim()
    result = result + "\t" + (SPPNetParser.oneDimSPPNet(rstBuff.map(item => item._2+0.0).toArray)).mkString("\t").trim()
    result = result + "\t" + (SPPNetParser.oneDimSPPNet(rstBuff.map(item => item._3+0.0).toArray)).mkString("\t").trim()
    result = result + "\t" + (SPPNetParser.oneDimSPPNet(rstBuff.map(item => item._4+0.0).toArray)).mkString("\t").trim()
    result = result + "\t" + (SPPNetParser.oneDimSPPNet(rstBuff.map(item => item._5+0.0).toArray)).mkString("\t").trim()
    result = result + "\t" + (SPPNetParser.oneDimSPPNet(rstBuff.map(item => item._6+0.0).toArray)).mkString("\t").trim()+"\r\n"

    FileUtil.saveString(saveFile, result, true)
    //System.out.print(result)
  }

}
