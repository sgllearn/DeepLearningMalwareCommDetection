package com.sgl.preprocessing;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.TimeZone;

import com.sgl.util.FileUtil;

/**
 * 将三种格式的数据转换为我们自己的类Session或类Netflow记录
 * @author sgl
 *
 */
public class Preprocess_Reformat {
	public static SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
	static {
		sdf.setTimeZone(TimeZone.getTimeZone("Europe/Paris"));
	}
	public static void main(String[] args) {
		String srcDir = args[0];//[Src_Dir]
		String dstDir = args[1];//[Dst_Dir]

//		Reformat_netflow(srcDir, "2013-11-06_capture-win8.netflow", dstDir);

		File[] filelist = (new File(srcDir)).listFiles();
		for(int i = 0; i<filelist.length; i++) {
			String filename = filelist[i].getName();
//			if(!filename.endsWith(".labeled")) {
//				continue;
//			}
			int totalCount = Reformat(srcDir, filename, dstDir);
			if(totalCount<10 && totalCount>=0) {
				System.out.println("No Item: "+filename);
			}
		}
	}
	public static int Reformat(String srcDir, String filename, String dstDir) {
		File targetFile = new File(dstDir+filename);
		if(targetFile.exists())
			return -1;

		if(filename.endsWith(".2format"))
			return Reformat_2format(srcDir, filename, dstDir);
		else if(filename.endsWith(".labeled"))
			return Reformat_labeled(srcDir, filename, dstDir);
		else if(filename.endsWith(".netflow"))
			return Reformat_netflow(srcDir, filename, dstDir);
		else
			return -2;
	}

	public static int Reformat_2format(String srcDir, String filename, String dstDir) {
		try {
			BufferedReader br = new BufferedReader(new FileReader(new File(srcDir+filename)));
			StringBuilder sb = new StringBuilder();
			int index = 0;
			int totalCount = 0;
			String line = null;

			while((line = br.readLine())!=null)
			{
				line = line.trim();
				String[] items = line.split(",");
				if(items.length!=33)
				{
					System.out.println("Can't parse: "+line);
					continue;
				}

				if(line.contains("Label"))
				{
					sb.append("SrcIP\tDstIP\tSrcPort\tDstPort\tProto\tSendPacketCount\tReceivePacketCount\tPacketCount\tSendLength\tReceiveLength\tTotalLength\tTime\tFirstPacketArrive\tLastPacketArrive\tDuration\tLabel").append("\r\n");
					index++;
					totalCount++;
				}
				else {
					sb.append(items[0]).append("\t");
					sb.append(items[1]).append("\t");
					sb.append(items[3]).append("\t");
					sb.append(items[4]).append("\t");
					sb.append(items[2]).append("\t");

					sb.append(items[19]).append("\t");
					sb.append(items[20]).append("\t");
					sb.append(items[26]).append("\t");
					sb.append(items[21]).append("\t");
					sb.append(items[22]).append("\t");
					sb.append(items[27]).append("\t");

					Calendar c = Calendar.getInstance();
					c.setTime(sdf.parse(items[12].replace("/", "-").substring(0, 23)));
					sb.append(c.getTimeInMillis()).append("\t");

					sb.append(items[12].replace("/", "-")).append("\t");
					sb.append(items[13].replace("/", "-")).append("\t");
					sb.append(items[25]).append("\t");
					sb.append(items[32]);
					sb.append("\r\n");

					index++;
					totalCount++;
				}

				if(index>10000)
				{
					index = 0;
					FileUtil.saveString(dstDir+filename, sb.toString(), true);
					sb = null;
					sb = new StringBuilder();
				}
			}
			if(sb!=null)
				FileUtil.saveString(dstDir+filename, sb.toString(), true);

			br.close();
			return totalCount;
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		};
		return 0;
	}


	public static int Reformat_labeled(String srcDir, String filename, String dstDir) {
		try {
			BufferedReader br = new BufferedReader(new FileReader(new File(srcDir+filename)));
			StringBuilder sb = new StringBuilder();
			int index = 0;
			int totalCount = 0;
			String line = null;

			while((line = br.readLine())!=null)
			{
				line = line.trim();
				String[] items = line.split("\\s+");

				if(line.contains("Label"))
				{
					sb.append("SrcIP\tDstIP\tSrcPort\tDstPort\tProto\tPacketCount\tTotalLength\tTime\tFirstPacketArrive\tDuration\tLabel").append("\r\n");
					index++;
					totalCount++;
				}
				else if(items.length==14) {
					String[] src = items[4].split(":");
					String[] dst = items[6].split(":");

					if(src.length!=2 || dst.length!=2)
					{
						System.out.println("Src or Dst Wrong: "+line);
						continue;
					}

					sb.append(src[0]).append("\t");
					sb.append(dst[0]).append("\t");
					sb.append(src[1]).append("\t");
					sb.append(dst[1]).append("\t");
					sb.append(items[3]).append("\t");

					sb.append(items[9]).append("\t");
					sb.append(items[10]).append("\t");

					String time_str = (items[0]+" "+items[1]).replace("/", "-").substring(0, 23);
					Calendar c = Calendar.getInstance();
					c.setTime(sdf.parse(time_str));
					sb.append(c.getTimeInMillis()).append("\t");
					sb.append(time_str).append("\t");
					sb.append(items[2]).append("\t");

					sb.append(items[12]+";"+items[13]);
					sb.append("\r\n");

					index++;
					totalCount++;
				}
				else if(items.length==13) {
					String[] src = items[4].split(":");
					String[] dst = items[6].split(":");

					if(src.length!=2 || dst.length!=2)
					{
						System.out.println("Src or Dst Wrong: "+line);
						continue;
					}

					sb.append(src[0]).append("\t");
					sb.append(dst[0]).append("\t");
					sb.append(src[1]).append("\t");
					sb.append(dst[1]).append("\t");
					sb.append(items[3]).append("\t");

					sb.append(items[9]).append("\t");
					sb.append(items[10]).append("\t");

					String time_str = (items[0]+" "+items[1]).replace("/", "-").substring(0, 23);
					Calendar c = Calendar.getInstance();
					c.setTime(sdf.parse(time_str));
					sb.append(c.getTimeInMillis()).append("\t");
					sb.append(time_str).append("\t");
					sb.append(items[2]).append("\t");

					sb.append(items[12]);
					sb.append("\r\n");

					index++;
					totalCount++;
				}
				else {
					if(line.contains(","))
					{
						items = line.split(",");
						if(items.length==16) {

							sb.append(items[3]).append("\t");
							sb.append(items[6]).append("\t");
							sb.append(items[4]).append("\t");
							sb.append(items[7]).append("\t");
							sb.append(items[2]).append("\t");

							sb.append(items[11]).append("\t");
							sb.append(items[12]).append("\t");

							String time_str = items[0].replace("/", "-");
							Calendar c = Calendar.getInstance();
							c.setTime(sdf.parse(time_str));
							sb.append(c.getTimeInMillis()).append("\t");
							sb.append(time_str).append("\t");
							sb.append(items[1]).append("\t");

							sb.append(items[14]);
							sb.append("\r\n");

							index++;
							totalCount++;
						}

					}
					else {
						System.out.println("Can't parse: "+line);
						continue;
					}

				}

				if(index>10000)
				{
					index = 0;
					FileUtil.saveString(dstDir+filename, sb.toString(), true);
					sb = null;
					sb = new StringBuilder();
				}
			}
			if(sb!=null)
				FileUtil.saveString(dstDir+filename, sb.toString(), true);

			br.close();
			return totalCount;
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		};
		return 0;
	}
	public static int Reformat_netflow(String srcDir, String filename, String dstDir) {
		try {
			BufferedReader br = new BufferedReader(new FileReader(new File(srcDir+filename)));
			StringBuilder sb = new StringBuilder();
			int index = 0;
			int totalCount = 0;
			String line = null;

			while((line = br.readLine())!=null)
			{
				line = line.trim();
				String[] items = line.split("\\s+");

				if(line.contains("Label"))
				{
					sb.append("SrcIP\tDstIP\tSrcPort\tDstPort\tProto\tPacketCount\tTotalLength\tTime\tFirstPacketArrive\tDuration\tLabel").append("\r\n");
					index++;
					totalCount++;
				}
				else if(items.length==15) {
					sb.append(items[4]).append("\t");
					sb.append(items[7]).append("\t");
					sb.append(items[5]).append("\t");
					sb.append(items[8]).append("\t");
					sb.append(items[3]).append("\t");

					sb.append(items[12]).append("\t");
					sb.append(items[13]).append("\t");

					String time_str = (items[0]+" "+items[1]).replace("/", "-").substring(0, 23);
					Calendar c = Calendar.getInstance();
					c.setTime(sdf.parse(time_str));
					sb.append(c.getTimeInMillis()).append("\t");
					sb.append(time_str).append("\t");
					sb.append(items[2]).append("\t");

					sb.append(items[14]);
					sb.append("\r\n");

					index++;
					totalCount++;
				}
				else if(items.length==14) {
					sb.append(items[4]).append("\t");
					sb.append(items[7]).append("\t");
					sb.append(items[5]).append("\t");
					sb.append(items[8]).append("\t");
					sb.append(items[3]).append("\t");

					sb.append(items[11]).append("\t");
					sb.append(items[12]).append("\t");

					String time_str = (items[0]+" "+items[1]).replace("/", "-").substring(0, 23);
					Calendar c = Calendar.getInstance();
					c.setTime(sdf.parse(time_str));
					sb.append(c.getTimeInMillis()).append("\t");
					sb.append(time_str).append("\t");
					sb.append(items[2]).append("\t");

					sb.append(items[13]);
					sb.append("\r\n");

					index++;
					totalCount++;
				}
				else {
					System.out.println("Can't parse: "+line);
					continue;
				}

				if(index>10000)
				{
					index = 0;
					FileUtil.saveString(dstDir+filename, sb.toString(), true);
					sb = null;
					sb = new StringBuilder();
				}
			}
			if(sb!=null)
				FileUtil.saveString(dstDir+filename, sb.toString(), true);

			br.close();
			return totalCount;
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		};
		return 0;
	}



}
